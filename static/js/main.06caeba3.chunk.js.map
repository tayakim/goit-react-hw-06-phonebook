{"version":3,"sources":["component/contactList/contactList/contactsList.module.css","component/alert/alert.module.css","component/phonebook/phonebook.module.css","component/contactForm/contactForm.module.css","component/redux/contacts/contactAction.jsx","component/contactList/contactList/ContactList.jsx","component/alert/Alert.jsx","component/contactForm/ContactForm.jsx","component/contactForm/ContactFormCont.jsx","component/filter/Filter.jsx","component/filter/FilterCont.jsx","component/phonebook/Phonebook.jsx","component/App.jsx","component/redux/contacts/contactsReducer.jsx","component/redux/store.js","index.js"],"names":["module","exports","addContactArray","createAction","removeContact","addFilter","connect","state","contacts","filter","contact","name","toLocaleLowerCase","includes","dispatch","onDeleteContact","id","contactActions","TransitionGroup","component","className","styles","list","map","number","CSSTransition","timeout","classNames","item","type","onClick","button","Alert","isVisible","in","unmountOnExit","alert","alertText","ContactForm","onNameChange","e","setState","target","value","onNumberChange","onHandleClick","isUnique","props","some","console","log","addContact","uuidv4","onAddContact","setTimeout","this","placeholder","onChange","Component","Filter","onChangeFilter","string","Phonebook","persistedContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","appear","ContactFormCont","FilterCont","App","createReducer","action","payload","actions","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06caeba3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactsList_list__keOHB\",\"item\":\"contactsList_item__2zmIZ\",\"button\":\"contactsList_button__2i-LC\",\"enter\":\"contactsList_enter__2pvdZ\",\"enterActive\":\"contactsList_enterActive__3RpEG\",\"exit\":\"contactsList_exit__3MSEP\",\"exitActive\":\"contactsList_exitActive__1QcLO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"alert_alert__3MWOg\",\"alertText\":\"alert_alertText__3RKjo\",\"enter\":\"alert_enter__1Db19\",\"enterActive\":\"alert_enterActive__1BhN5\",\"exit\":\"alert_exit__2Uavk\",\"exitActive\":\"alert_exitActive__L_5MH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"phonebook_phonebook__3Orft\",\"text\":\"phonebook_text__3nkAe\",\"appear\":\"phonebook_appear__3q4ho\",\"appearActive\":\"phonebook_appearActive__3nMdS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"contactForm_button__VB3fD\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContactArray = createAction(\"type/ADD_CONTACT\");\r\nexport const removeContact = createAction(\"type/REMOVE_CONTACT\");\r\nexport const addFilter = createAction(\"type/ADD_FILTER\");\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport styles from \"./contactsList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as contactActions from \"../../redux/contacts/contactAction\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <TransitionGroup component=\"ul\" className={styles.list}>\r\n    {contacts.map(({ name, number, id }) => (\r\n      <CSSTransition key={id} timeout={250} classNames={styles}>\r\n        <li className={styles.item}>\r\n          {name}: {number}\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n            className={styles.button}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.filter((contact) =>\r\n    contact.name.toLocaleLowerCase().includes(state.filter.toLocaleLowerCase())\r\n  ),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactActions.removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"../alert/alert.module.css\";\r\n\r\nconst Alert = ({ isVisible }) => {\r\n  return (\r\n    <CSSTransition\r\n      classNames={styles}\r\n      in={isVisible}\r\n      timeout={250}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.alert}>\r\n        <p className={styles.alertText}>\r\n          This contact is already in contacts list!\r\n        </p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport styles from \"./contactForm.module.css\";\r\nimport { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Alert from \"../alert/Alert\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    isVisible: false,\r\n  };\r\n\r\n  onNameChange = (e) => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n  onNumberChange = (e) => {\r\n    this.setState({ number: e.target.value });\r\n  };\r\n  onHandleClick = () => {\r\n    const isUnique = !this.props.contacts.some((item) =>\r\n      item.name.includes(this.state.name)\r\n    );\r\n\r\n    console.log(isUnique);\r\n\r\n    if (isUnique) {\r\n      const addContact = {\r\n        id: uuidv4(),\r\n        name: this.state.name,\r\n        number: this.state.number,\r\n      };\r\n      this.props.onAddContact(addContact);\r\n    } else {\r\n      setTimeout(() => this.setState({ isVisible: false }), 3000);\r\n      this.setState({ isVisible: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <>\r\n        <Alert isVisible={this.state.isVisible} />\r\n        <p>Name</p>\r\n        <input\r\n          placeholder=\"Name\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          onChange={this.onNameChange}\r\n        ></input>\r\n        <p>Number</p>\r\n        <input\r\n          placeholder=\"Number\"\r\n          id=\"number\"\r\n          onChange={this.onNumberChange}\r\n        ></input>\r\n        <br></br>\r\n        <button\r\n          type=\"button\"\r\n          onClick={this.onHandleClick}\r\n          className={styles.button}\r\n        >\r\n          Add contacts\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactForm);\r\n","import { connect } from \"react-redux\";\r\nimport * as contactActions from \"../redux/contacts/contactAction\";\r\nimport ContactForm from \"./ContactForm\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAddContact: (contact) => dispatch(contactActions.addContactArray(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Filter extends Component {\r\n  onChangeFilter = (e) => {\r\n    this.props.onChangeFilter(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <p>Find contacts by name: </p>\r\n        <input\r\n          placeholder=\"type name...\"\r\n          type=\"text\"\r\n          // value={value}\r\n          onChange={this.onChangeFilter}\r\n        ></input>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport * as contactActions from \"../redux/contacts/contactAction\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n  filter: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (string) => dispatch(contactActions.addFilter(string)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\r\nimport ContactList from \"../contactList/contactList/ContactList\";\r\nimport styles from \"./phonebook.module.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport ContactFormCont from \"../contactForm/ContactFormCont\";\r\nimport FilterCont from \"../filter/FilterCont\";\r\n\r\nexport default class Phonebook extends Component {\r\n  state = {\r\n    // contacts: [\r\n    //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n    //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n    //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n    //   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    // ],\r\n    // filter: \"\",\r\n    // name: \"\",\r\n    // number: \"\",\r\n    // isVisible: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const persistedContacts = localStorage.getItem(\"contacts\");\r\n\r\n    if (persistedContacts !== null) {\r\n      this.setState({\r\n        contacts: JSON.parse(persistedContacts),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  // onDeleteContact = (contactId) => {\r\n  //   this.setState((prevState) => {\r\n  //     return {\r\n  //       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  // onChangeFilter = (e) => {\r\n  //   this.setState({ filter: e.target.value });\r\n  // };\r\n\r\n  // getVisibleContacts = () => {\r\n  //   const { contacts, filter } = this.state;\r\n\r\n  //   return contacts.filter((contacts) =>\r\n  //     contacts.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\r\n  //   );\r\n  // };\r\n  // onNameChange = (e) => {\r\n  //   this.setState({ name: e.target.value });\r\n  // };\r\n  // onNumberChange = (e) => {\r\n  //   this.setState({ number: e.target.value });\r\n  // };\r\n\r\n  // addContact = {\r\n  //   id: uuidv4(),\r\n  //   name: this.state.name,\r\n  //   number: this.state.number,\r\n  // };\r\n\r\n  // const isUnique = !contacts.addContactArray\r\n  //   .map((contact) => contact.name)\r\n  //   .includes(addContact.name);\r\n\r\n  // console.log(isUnique);\r\n\r\n  // if (isUnique) {\r\n  //   // addContactArray();\r\n  //   contacts.addContactArray(this.state, addContact);\r\n  //   // this.setState((prevState) => {\r\n  //   //   return {\r\n  //   //     contacts: [...prevState.contacts, addContact],\r\n  //   //   };\r\n  //   // });\r\n  // } else {\r\n  //   // alert(addContact.name + \" is already in contacts!\");\r\n  //   this.setState({ isVisible: true });\r\n  // }\r\n  // };\r\n\r\n  render() {\r\n    // const { filter } = this.state;\r\n    // const VisibleContacts = this.getVisibleContacts();\r\n    // console.log(this.addContact);\r\n    // console.log(this.state.name);\r\n\r\n    return (\r\n      // <div className={(styles.phonebook, styles.text)}>\r\n      // <CSSTransition\r\n      //   in={true}\r\n      //   timeout={500}\r\n      //   classNames={styles}\r\n      //   appear={true}\r\n      // >\r\n      //   <h1>Phonebook</h1>\r\n      // </CSSTransition>\r\n\r\n      //   <ContactForm\r\n      //     onHandleClick={this.onAddContact}\r\n      //     onNameChange={this.onNameChange}\r\n      //     onNumberChange={this.onNumberChange}\r\n      //   />\r\n\r\n      //   <Alert isVisible={this.state.isVisible} />\r\n      //   <h2>Contacts</h2>\r\n      //   <CSSTransition\r\n      //     in={this.state.contacts.length > 1}\r\n      //     timeout={250}\r\n      //     classNames={styles}\r\n      //     unmountOnExit\r\n      //   >\r\n      //     <Filter value={filter} onChangeFilter={this.onChangeFilter} />\r\n      //   </CSSTransition>\r\n\r\n      //   <ContactList\r\n      //     contacts={VisibleContacts}\r\n      //     onDeleteContact={this.onDeleteContact}\r\n      //   />\r\n      // </div>\r\n\r\n      <>\r\n        <CSSTransition\r\n          in={true}\r\n          timeout={500}\r\n          classNames={styles}\r\n          appear={true}\r\n        >\r\n          <h1>Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        <ContactFormCont />\r\n        <h2>Contacts</h2>\r\n\r\n        <FilterCont />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Phonebook from \"../component/phonebook/Phonebook\";\r\n\r\nconst App = () => {\r\n  return <Phonebook />;\r\n};\r\n\r\nexport default App;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContactArray, removeContact, addFilter } from \"./contactAction\";\r\n\r\nexport const contacts = createReducer([], {\r\n  [addContactArray]: (state, action) => [...state, action.payload],\r\n  [removeContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nexport const filter = createReducer(\"\", {\r\n  [addFilter]: (state, actions) => actions.payload,\r\n});\r\n","// import { createStore } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { contacts, filter } from \"./contacts/contactsReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts,\r\n    filter,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/App\";\nimport store from \"./component/redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}